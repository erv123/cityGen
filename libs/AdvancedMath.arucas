class PerlinNoise { //TODO: extend Transformation
    var vector_grid = {};
    var vector_grid_2d = {};
    var dismantler;

    PerlinNoise(){
        this.dismantler = fun(vec) { return vec; }; 
    }

    PerlinNoise(dismantler){
        this.dismantler = dismantler;
    }

    fun calculatePerlinValue(pos){
        pos = this.dismantler(pos);
        vectorList = [];
        for(i = 0;i<2;i++){
            x = Math.floor(pos[0])+i;
            if(!this.vector_grid.getKeys().contains(x))
            this.vector_grid[x]={};
            for(j = 0;j<2;j++){
                y = Math.floor(pos[1])+j;
                if(!this.vector_grid[x].getKeys().contains(y))
                this.vector_grid[x][y]={};
                for(k = 0;k<2;k++){
                    z =  Math.floor(pos[2])+k;
                    if(!this.vector_grid[x][y].getKeys().contains(z)){
                        angle_1 = random(360);
                        angle_2 = random(360);
                        this.vector_grid[x][y][z] = [Math.cos(Math.toRadians(angle_1)),Math.sin(Math.toRadians(angle_1)),Math.sin(Math.toRadians(angle_2))];
                        //this.vector_grid[x][y][z] = [random(3)-1,random(3)-1,random(3)-1)];
                    }
                    vectorList.append([x, y, z]);
                }
            }
        }
        dotProductList = [];
        for(i = 0;i<2;i++){
            for(j = 0;j<2;j++){
                for(k = 0;k<2;k++){
                    x = Math.floor(pos[0])+i;
                    y = Math.floor(pos[1])+j;
                    z = Math.floor(pos[2])+k;
                    cornerVector = this.vector_grid[x][y][z];
                    localX = pos[0]-Math.floor(pos[0])-i;
                    localY = pos[1]-Math.floor(pos[1])-j;
                    localZ = pos[2]-Math.floor(pos[2])-k;
                    dotProduct = cornerVector[0]*localX + cornerVector[1]*localY + cornerVector[2]*localZ;
                    dotProductList.append(dotProduct);
                }
            }
        }
        interpolationLevel1 = [];
        for(i=0;i<8;i=i+2){
            weight = pos[2]-Math.floor(pos[2]);
            interpolationLevel1.append(this.interpolate(dotProductList[i],dotProductList[i+1],weight));
        }
        interpolatedNumber1 = this.interpolate(interpolationLevel1[0],interpolationLevel1[1],pos[1]-Math.floor(pos[1]));
        interpolatedNumber2 = this.interpolate(interpolationLevel1[2],interpolationLevel1[3],pos[1]-Math.floor(pos[1]));
        return this.interpolate(interpolatedNumber1,interpolatedNumber2,pos[0]-Math.floor(pos[0]));
    }

    //2d noise
    fun calculatePerlinValue(vec2d){
        for(i = 0;i<2;i++){
            x = Math.floor(vec2d.x)+i;
            if(!this.vector_grid_2d.getKeys().contains(x))
            this.vector_grid_2d[x]={};
            for(k = 0;k<2;k++){
                z =  Math.floor(vec2d.y)+k;
                if(!this.vector_grid_2d[x].getKeys().contains(z)){
                    angle_1 = random(360);
                    angle_2 = random(360);
                    //this.vector_grid[x][y][z] = [Math.cos(Math.toRadians(angle_1)),Math.sin(Math.toRadians(angle_1)),Math.sin(Math.toRadians(angle_2))];
                    this.vector_grid_2d[x][z] = [random(3)-1,0,random(3)-1];
                }
            }
        }
        dotProductList = [];
        for(i = 0;i<2;i++){
            for(k = 0;k<2;k++){
                x = Math.floor(vec2d.x)+i;
                y = 0;
                z = Math.floor(vec2d.y)+k;
                cornerVector = this.vector_grid_2d[x][z];
                localX = vec2d.x-Math.floor(vec2d.x)-i;
                localY = 0;
                localZ = vec2d.y-Math.floor(vec2d.y)-k;
                dotProduct = cornerVector[0]*localX + cornerVector[2]*localZ;
                dotProductList.append(dotProduct);
            }
        }
        
        interpolatedNumber1 = this.interpolate(dotProductList[0],dotProductList[1],vec2d.y-Math.floor(vec2d.y));
        interpolatedNumber2 = this.interpolate(dotProductList[2],dotProductList[3],vec2d.y-Math.floor(vec2d.y));
        return this.interpolate(interpolatedNumber1,interpolatedNumber2,vec2d.x-Math.floor(vec2d.x));
    }

    fun interpolate(number1, number2, weight){
        output = number1+this.fadeFunction(weight)*(number2-number1);
        return output;
    }

    fun fadeFunction(number){
        return (6*number^5)-(15*number^4)+(10*number^3);
    }
}

class BezierCurve { //TODO: extend Transformation
    var p1;
    var p2;
    var p3;
    var p4;
    var quadratic = true;
    var coordinates;

    var dismantler = fun(vec) { return vec; }; 
    var factory = fun(x, y, z) { return [x, y, z]; };

    static fun getPoints(posList,resolution){
        quadratic = true;
        p1 = posList.get(0);
        p2 = posList.get(1);
        p3 = posList.get(2);
        coordinates = [];
        if (len(posList) == 4) {
            p4 = posList.get(3);
            quadratic = false;
        }
        for(t = 0; t < 1; t = t + resolution){
            if (this.quadratic) {
                for (t = 0; t < 1; t = t + (1/resolution)) {
                    x = (1 - t)^2 * this.p1[0] + 2 * (1 - t) * t * this.p2[0] + t^2 * this.p3[0];
                    y = (1 - t)^2 * this.p1[1] + 2 * (1 - t) * t * this.p2[1] + t^2 * this.p3[1];
                    z = (1 - t)^2 * this.p1[2] + 2 * (1 - t) * t * this.p2[2] + t^2 * this.p3[2];
                    coordinates.append([x,y,z]);
                }
            }
            else { //cubic
                for (t = 0; t < 1; t = t + (1/resolution)) {
                    x = (1 - t)^3 * this.p1[0] + 3 * (1 - t)^2 * t * this.p2[0] + 3 * (1 - t) * t^2 * this.p3[0] + t^3 * this.p4[0];
                    y = (1 - t)^3 * this.p1[1] + 3 * (1 - t)^2 * t * this.p2[1] + 3 * (1 - t) * t^2 * this.p3[1] + t^3 * this.p4[1];
                    z = (1 - t)^3 * this.p1[2] + 3 * (1 - t)^2 * t * this.p2[2] + 3 * (1 - t) * t^2 * this.p3[2] + t^3 * this.p4[2];
                    coordinates.append([x,y,z]);
                }
            }
        }
    }
     
    BezierCurve(posList) {
        this.p1 = posList.get(0);
        this.p2 = posList.get(1);
        this.p3 = posList.get(2);
        if (len(posList) == 4) {
            this.p4 = posList.get(3);
            this.quadratic = false;
        }
        this.coordinates = this.getPoints(100);
    }

    fun getPoint(t){
        if (this.quadratic) {
            for (t = 0; t < 1; t = t + (1/resolution)) {
                x = (1 - t)^2 * this.p1[0] + 2 * (1 - t) * t * this.p2[0] + t^2 * this.p3[0];
                y = (1 - t)^2 * this.p1[1] + 2 * (1 - t) * t * this.p2[1] + t^2 * this.p3[1];
                z = (1 - t)^2 * this.p1[2] + 2 * (1 - t) * t * this.p2[2] + t^2 * this.p3[2];
                return([x,y,z]);
            }
        }
        else { //cubic
            for (t = 0; t < 1; t = t + (1/resolution)) {
                x = (1 - t)^3 * this.p1[0] + 3 * (1 - t)^2 * t * this.p2[0] + 3 * (1 - t) * t^2 * this.p3[0] + t^3 * this.p4[0];
                y = (1 - t)^3 * this.p1[1] + 3 * (1 - t)^2 * t * this.p2[1] + 3 * (1 - t) * t^2 * this.p3[1] + t^3 * this.p4[1];
                z = (1 - t)^3 * this.p1[2] + 3 * (1 - t)^2 * t * this.p2[2] + 3 * (1 - t) * t^2 * this.p3[2] + t^3 * this.p4[2];
                return([x,y,z]);
            }
        }
    }
    
    fun getPoints(resolution) {
        coordinates = [];
        for(t = 0; t < 1; t = t + resolution){
            coordinates.append(this.getPoint(t));
        }
        return coordinates;
    }
}

class Ellipse {
    var center;
    var length;
    var width;
    var startingAngle = 0;
    var endAngle = 2 * Math.pi;
    
    var dismantler; 
    var factory = fun(x, y, z) { return [x, y, z]; };

    Ellipse(center, radius){ //Circle
        this.center = center;
        this.length = radius;
        this.width = radius;
    }
    Ellipse(center, radius, startingAngle, endAngle){ //Partial Circle
        this.center = center;
        this.length = radius;
        this.width = radius;
        this.startingAngle = startingAngle;
        this.endAngle = endAngle;
    }
    Ellipse(center, length, width){ //Ellipse
        this.center = center;
        this.length = length;
        this.width = width;
    }
    Ellipse(center, length, width, startingAngle, endAngle){ //Partial Ellipse
        this.center = center;
        this.length = length;
        this.width = width;
        this.startingAngle = startingAngle;
        this.endAngle = endAngle;
    }
    Ellipse(center,length,width,startingAngle,endAngle,dismantler,factory){
        this.factory = factory;
        this.dismantler = dismantler;
        this.center = this.dismantler(center);
        this.length = length;
        this.width = width;
        this.startingAngle = startingAngle;
        this.endAngle = endAngle;     
    }

    fun getPoints(res){
        coordinates = [];
        x = this.center[0]; y = this.center[1]; z = this.center[2];
        resolution = Math.abs((this.endAngle - this.startingAngle))/res;
        for (theta = this.startingAngle; theta < this.endAngle; theta = theta + resolution) {
            l = this.length; w = this.width;
            xOffset = (0.25 * l * w) / (Math.sqrt((0.5 * w * Math.sin(theta)) ^ 2 + (0.5 * l * Math.cos(theta)) ^ 2)) * Math.cos(theta);
            zOffset = (0.25 * l * w) / (Math.sqrt((0.5 * w * Math.sin(theta)) ^ 2 + (0.5 * l * Math.cos(theta)) ^ 2)) * Math.sin(theta);
            coordinates.append(this.factory(x + xOffset,y,z + zOffset));
        }
        return coordinates;
    }
}

class PolarCoordinates{
    static fun toPolarCoordinates(x,y){
        angle = Math.arctan(y/x);
        if(x<0){
            angle = angle + Math.pi;
        }
        if(angle.isNaN()){
            angle = 0;
        }
        r = Math.sqrt(x^2+y^2);
        return [angle,r]; 
    }
    static fun toPolarCoordinates(pos){
        angle_1 = Math.arctan(Math.sqrt(pos[0]^2+pos[1]^2)/pos[2]);
        angle_2 = Math.arcsin(pos[1]/pos[0]);
        r = Math.sqrt(pos[0]^2+pos[1]^2+pos[2]^2);
        return [angle_1,angle_2,r];
    }
    static fun toPolarCoordinates(x,y,z){
        angle_1 = Math.arctan(Math.sqrt(x^2+y^2)/z);
        angle_2 = Math.arcsin(y/x);
        r = Math.sqrt(x^2+y^2+z^2);
        return [angle_1,angle_2,r];
    }
    static fun toCartesianCoordinates(angle, r){
        x = r * Math.cos(angle);
        y = r * Math.sin(angle);
        return [x,y];
    }
}

class Transformation {
    var coordinates = [];
    var averageCoordintate = [];

    var dismantler; 
    var factory;
    
    static fun rotate(coordinate, center, amount,inputAxis) {
        coordinate2D = [];
        axis = ["x","y","z"];
        staticCoordinate = 0;
        i = axis.indexOf(axis);
        foreach(value:coordinate){
            if(axis.indexOf(inputAxis)!=coordinate.indexOf(value)){
                coordinate2D.append(value - center[coordinate.indexOf(value)]);
            }
            else{
                staticCoordinate = value-center[axis.indexOf(inputAxis)];
            }
        }
        polarCoordinate = PolarCoordinates.toPolarCoordinates(coordinate2D[0],coordinate2D[1]);
        polarCoordinate[0] = polarCoordinate[0] - amount;
        rotated2DCoordinate = PolarCoordinates.toCartesianCoordinates(polarCoordinate[0],polarCoordinate[1]);
        outputCoordinate = [];
        j=0;
        for(i=0;i<3;i++){
            if(i == axis.indexOf(inputAxis)){
                outputCoordinate.append(staticCoordinate);
            }
            else{
                outputCoordinate.append(rotated2DCoordinate[j]);
                j++;
            }
        }
        return [outputCoordinate[0]+center[0],outputCoordinate[1]+center[1],outputCoordinate[2]+center[2]];
    }


    Transformation(coordinates) {
        this.coordinates = coordinates;
        this.dismantler = fun(vec) { return vec; };
        this.factory = fun(list) { return list; }; 
    }
    Transformation(coordinates,dismantler,factory){
        this.dismantler = dismantler;
        this.factory = factory;
        dismantledCoords = [];
        foreach(coord:coordinates){
            dismantledCoords.append(dismantler(coord));
        }
        this.coordinates = dismantledCoords;
    }

    fun calculateAverageCoordintate(){
        xSum = 0; ySum = 0; zSum = 0;
        foreach (coordinate : this.coordinates) {
            xSum = xSum + coordinate[0];
            ySum = ySum + coordinate[1];
            zSum = zSum + coordinate[2];
        }
        xMean = xSum / len(this.coordinates);
        yMean = ySum / len(this.coordinates);
        zMean = zSum / len(this.coordinates);
        this.averageCoordintate = [xMean, yMean, zMean];
        return  this.factory([xMean, yMean, zMean]);
    }
    fun rotate(amount,axis) {
        this.calculateAverageCoordintate();
        center = this.averageCoordintate;
        rotatedCoordinates = [];
        returnCoordinates = [];
        foreach(coordinate:this.coordinates){
            rotatedCoordinates.append(Transformation.rotate(coordinate,center,amount,axis));
            returnCoordinates.append(this.factory(Transformation.rotate(coordinate,center,amount,axis)));
        }
        this.coordinates = rotatedCoordinates;
        return returnCoordinates;
    }

    fun rotate(center, amount,axis){
        rotatedCoordinates = [];
        returnCoordinates = [];
        center = this.dismantler(center);
        
        foreach(coordinate:this.coordinates){
            rotatedCoordinates.append(Transformation.rotate(coordinate,center,amount,axis));
            returnCoordinates.append(this.factory(Transformation.rotate(coordinate,center,amount,axis)));
        }
        this.coordinates = rotatedCoordinates;
        return returnCoordinates;
    }

    fun translate(xDistance, yDistance, zDistance) {
        translatedCoordinates = [];
        returnCoordinates = [];
        foreach (coordinate : this.coordinates) {
            x = coordinate[0] + xDistance;
            y = coordinate[1] + yDistance;
            z = coordinate[2] + zDistance;
            translatedCoordinates.append([x,y,z]);
            returnCoordinates.append(this.factory([x,y,z]));
        }
        this.coordinates = translatedCoordinates;
        return returnCoordinates;
    }
    
    
    fun reflect(a, b, c) { // ax + bz + c = 0
        reflectedCoordinates = [];
        returnCoordinates = [];
        foreach (coordinate : this.coordinates) {
            x = (coordinate[0] * (a^2 - b^2) - 2 * b * (a * coordinate[2] + c)) / (a^2 + b^2);
            z = (coordinate[2] * (b^2 - a^2) - 2 * a * (b * coordinate[0] + c)) / (a^2 + b^2);
            reflectedCoordinates.append([x, coordinate[1], z]);
            returnCoordinates.append(this.factory([x, coordinate[1], z]));
        }
        this.coordinates = reflectedCoordinates;
        return returnCoordinates;
    }

    //TODO but i'm lazy
    /*
    fun reflect(plane) {
        reflectedCoordinates = [];
        foreach (coordinate : this.coordinates) {
            if (plane.uppercase() == "XY") {

            }
            else if (plane.uppercase() == "XZ") {

            }
            else if (plane.uppercase() == "YZ") {

            }
        }
        return reflectedCoordinates;
    }
    */

    fun dilate(scale) {
        this.calculateAverageCoordintate();
        origin = this.averageCoordintate;
        dilatedCoordinates = [];
        returnCoordinates = [];
        foreach (coordinate : this.coordinates) {
            x = (coordinate[0]-origin[0]) * scale;
            y = (coordinate[1]-origin[1]) * scale;
            z = (coordinate[2]-origin[2]) * scale;
            dilatedCoordinates.append([x+origin[0],y+origin[1],z+origin[2]]);
            returnCoordinates.append(this.factory([x+origin[0],y+origin[1],z+origin[2]]));
        }
        this.coordinates = dilatedCoordinates;
        return returnCoordinates;
    }

    fun dilate(origin, scale){
        origin = this.dismantler(origin);  
        dilatedCoordinates = [];
        returnCoordinates = [];
        foreach (coordinate : this.coordinates) {
            x = (coordinate[0]-origin[0]) * scale;
            y = (coordinate[1]-origin[1]) * scale;
            z = (coordinate[2]-origin[2]) * scale;
            dilatedCoordinates.append([x+origin[0],y+origin[1],z+origin[2]]);
            returnCoordinates.append(this.factory([x+origin[0],y+origin[1],z+origin[2]]));
        }
        this.coordinates = dilatedCoordinates;
        return returnCoordinates;
    }
    fun dilate(origin, xScale, yScale, zScale){
        origin = this.dismantler(origin);
        dilatedCoordinates = [];
        returnCoordinates = [];
        foreach (coordinate : this.coordinates) {
            x = (coordinate[0]-origin[0]) * xScale;
            y = (coordinate[1]-origin[1]) * yScale;
            z = (coordinate[2]-origin[2]) * zScale;
            dilatedCoordinates.append([x+origin[0],y+origin[1],z+origin[2]]);
            returnCoordinates.append(this.factory([x+origin[0],y+origin[1],z+origin[2]]));
        }
        this.coordinates = dilatedCoordinates;
        return returnCoordinates;
    }
    fun dilate(xScale, yScale, zScale) {
        this.calculateAverageCoordintate();
        origin = this.averageCoordintate;
        dilatedCoordinates = [];
        returnCoordinates = [];
        foreach (coordinate : this.coordinates) {
            x = (coordinate[0]-origin[0]) * xScale;
            y = (coordinate[1]-origin[1]) * yScale;
            z = (coordinate[2]-origin[2]) * zScale;
            dilatedCoordinates.append([x+origin[0],y+origin[1],z+origin[2]]);
            returnCoordinates.append(this.factory([x+origin[0],y+origin[1],z+origin[2]]));
        }
        this.coordinates = dilatedCoordinates;
        return returnCoordinates;
    }
}


class AdvancedMath{
    static fun newPerlinNoise(){
        return new PerlinNoise(fun(pos){return [pos.getX(),pos.getY(),pos.getZ()];});
    }

    static fun newCircle(center,radius){
        return new Ellipse(center,radius,radius,0,2*Math.pi,fun(pos){
            return [pos.getX(),pos.getY(),pos.getZ()];
        },
        fun(x,y,z){
            return new Pos(x,y,z);
        });
    }
    static fun newCircleArc(center,radius,startingAngle,endAngle){
        return new Ellipse(center,radius,radius,startingAngle,endAngle,fun(pos){
            return [pos.getX(),pos.getY(),pos.getZ()];
        },
        fun(x,y,z){
            return new Pos(x,y,z);
        });
    }
    static fun newEllipse(center,length,width){
        return new Ellipse(center,length,width,0,2*Math.pi,fun(pos){
            return [pos.getX(),pos.getY(),pos.getZ()];
        },
        fun(x,y,z){
            return new Pos(x,y,z);
        });
    }
    static fun newEllipseArc(center,length,width,startingAngle,endAngle){
        return new Ellipse(center,length,width,startingAngle,endAngle,fun(pos){
            return [pos.getX(),pos.getY(),pos.getZ()];
        },
        fun(x,y,z){
            return new Pos(x,y,z);
        });
    }
    static fun newTransformation(coords){
        return new Transformation(coords,fun(pos){
            return [pos.getX(),pos.getY(),pos.getZ()];
        },
        fun(list){
            return new Pos(list[0],list[1],list[2]);
        });
    }
    
    static fun atan2(x,y){
        if(x>0){
            return 2 * Math.arctan(y/(Math.sqrt(x^2+y^2)+x));
        }
        if(x<=0 && y!=0){
            return 2 * Math.arctan((Math.sqrt(x^2+y^2)+x)/y);
        }
        if(x<0 && y == 0){
            return Math.pi;
        }
        if(x==0 && y == 0){
            return 0;
        }
    }
    static fun atan2(vector){
        x = vector.x;
        y = vector.y;
        if(x>0){
            return 2 * Math.arctan(y/(Math.sqrt(x^2+y^2)+x));
        }
        if(x<=0 && y!=0){
            return 2 * Math.arctan((Math.sqrt(x^2+y^2)+x)/y);
        }
        if(x<0 && y == 0){
            return Math.pi;
        }
        if(x==0 && y == 0){
            return 0;
        }
    }
    static fun random(){
        return random(10000)/10000;
    }
}


class Vec2d {
    var x;
    var y;
    
    Vec2d(x,y) {
        this.x = x;
        this.y = y;
    }
    Vec2d(list){
        this.x = list[0];
        this.y = list[1];
    }

    static fun zeroVector() {
        return new Vec2d(0, 0);
    }

    static fun fromScalar(s) {
        return new Vec2d(s, s);
    }
    static fun fromString(string){
        string = string.replaceAll('\\[',"");
        string = string.replaceAll('\\]',"");
        list = string.split(',');
        return new Vec2d(list[0].toNumber(),list[1].toNumber());
    }

    /**
     * -pi to pi
     */
    static fun angleBetween(v1, v2) {
        // -2pi to 2pi
        angleBetween = v1.angle() - v2.angle();
        if (angleBetween > Math.pi) {
            angleBetween = angleBetween - 2 * Math.pi;
        } else if (angleBetween <= -Math.pi) {
            angleBetween = angleBetween + 2 * Math.pi;
        }
        return angleBetween;
    }

    fun add(v) {
        x = this.x + v.x;
        y = this.y + v.y;
        return new Vec2d(x,y);
    }

    /**
     * Angle in radians to positive x-axis between -pi and pi
     */
    fun angle() {
        return Math.arctan(this.y/this.x);
    }

    fun copy() {
        return new Vec2d(this.x, this.y);
    }

    fun cross(v) {
        return this.x * v.y - this.y * v.x;
    }

    fun distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
    }

    fun distanceToSquared (v) {
        dx = this.x - v.x;
        dy = this.y - v.y;
        return dx * dx + dy * dy;
    }

    fun divide(v) {
        if (v.x == 0 || v.y == 0) {
            return this;
        }

        this.x = this.x/v.x;
        this.y = this.y/v.y;
        return this;
    }

    fun divideScalar(s) {
        if (s == 0) {
            return this;
        }
        return this.multiplyScalar(1 / s);
    }

    fun dot(v) {
        return this.x * v.x + this.y * v.y;
    }

    fun equals(v): Boolean {
        return ((v.x == this.x) && (v.y == this.y));
    }

    fun length() {
        return Math.sqrt(this.lengthSq());
    }

    fun lengthSq() {
        return this.x * this.x + this.y * this.y;
    }

    fun multiply(v) {
        this.x = this.x * v.x;
        this.y = this.y * v.y;
        return this;
    }

    fun multiplyScalar(s) {
        x = this.x * s;
        y = this.y * s;
        return new Vec2d(x,y);
    }

    fun negate() {
        return this.multiplyScalar(-1);
    }

    fun normalize() {
        l = this.length();
        if (l == 0) {
            return this;
        }
        
        return this.divideScalar(this.length());
    }

    /*
     * Angle in radians
     */
    fun rotateAround(center, angle) {
        cos = Math.cos(angle);
        sin = Math.sin(angle);

        x = this.x - center.x;
        y = this.y - center.y;

        x = x * cos - y * sin + center.x;
        y = x * sin + y * cos + center.y;
        return new Vec2d(x,y);
    }

    fun set(v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    }

    fun setX(x) {
        this.x = x;
        return this;
    }

    fun setY(y) {
        this.y = y;
        return this;
    }

    fun setLength (length) {
        return this.normalize().multiplyScalar(length);
    }

    fun sub(v) {
        x = this.x - v.x;
        y = this.y - v.y;
        return new Vec2d(x,y);
    }
    operator [] (index){
        return [this.x,this.y][index];
    }
    
    fun toString(){
        return "[" + this.x + ", " + this.y + "]";
    }

    fun floor(){
        return new Vec2d(Math.floor(this.x),Math.floor(this.y));
    }
}/*
class Simplify {

	static fun simplify(points, tolerance) {
		sqTolerance = tolerance * tolerance;
		return Simplify.simplifyDouglasPeucker(points, sqTolerance);
	}

	static fun simplify(points, tolerance, highestQuality) {
		sqTolerance = tolerance * tolerance;
		if (!highestQuality)
			points = Simplify.simplifyRadialDistance(points, sqTolerance);
		points = Simplify.simplifyDouglasPeucker(points, sqTolerance);
		return points;
	}

	// distance-based simplification
	static fun simplifyRadialDistance(points, sqTolerance) {
		length = len(points);

		point = [];
		prevPoint = points[0];

		newPoints = [];
		newPoints.append(prevPoint);

		for (i = 1; i < length; i++) {
			point = points[i];

			if (Simplify.getSquareDistance(point, prevPoint) > sqTolerance) {
				newPoints.append(point);
				prevPoint = point;
			}
		}

		if (!prevPoint.equals(point)) {
			newPoints.append(point);
		}

		return newPoints;
	}

	// simplification using optimized Douglas-Peucker algorithm with recursion
	// elimination
	static fun simplifyDouglasPeucker(points, sqTolerance) {
		length = len(points);

		markers = [];

        first = 0;
		last = length - 1;

        for(i=0;i<length;i++){
            markers.append(2);
        }
        markers[0] = 1;
        markers[last] = 1;

		maxSqDist = 0;
		sqDist = null;
		index = 0;

		firstStack = [];
		lastStack = [];

		newPoints = [];

		
 
		while (last != null) {
			maxSqDist = 0;

			for (i = first + 1; i < last; i++) {
				sqDist = Simplify.getSquareSegmentDistance(points[i], points[first], points[last]);

				if (sqDist > maxSqDist) {
					index = i;
					maxSqDist = sqDist;
				}
			}

			if (maxSqDist > sqTolerance) {
				markers[index] = 1;

				firstStack.append(first);
				lastStack.append(index);

				firstStack.append(index);
				lastStack.append(last);
			}

			if (len(firstStack) > 1)
				first = firstStack.remove(len(firstStack) - 1);
			else
				first = null;

			if (lastStack.size() > 1)
				last = lastStack.remove(len(lastStack) - 1);
			else
				last = null;
		}

		for (i = 0; i < length; i++) {
			if (markers[i] != 2)
				newPoints.append(points[i]);
		}

		return newPoints;
	}

	static fun getSquareDistance(p1, p2) {
		dx = p1[0] - p2[0];
        dy = p1[1] - p2[1]; 
        dz = p1[2] - p2[2];
		return dx * dx + dy * dy + dz * dz;
	}

	// square distance from a point to a segment
	static fun getSquareSegmentDistance(p, p1, p2) {
		x = p1[0];
        y = p1[1];
        z = p1[2];

		dx = p2[0] - x;
        dy = p2[1] - y;
        dz = p2[2] - z;

		t;

		if (dx != 0 || dy != 0 || dz != 0) {
			t = ((p[0] - x) * dx + (p[1] - y) * dy) + (p[2] - z) * dz / (dx * dx + dy * dy + dz * dz);

			if (t > 1) {
				x = p2[0];
				y = p2[1];
				z = p2[2];

			} else if (t > 0) {
				x = x + dx * t;
				y = y + dy * t;
				z = z + dz * t;
			}
		}

		dx = p[0] - x;
		dy = p[1] - y;
		dz = p[2] - z;

		return dx * dx + dy * dy + dz * dz;
	}
}

class Simplify2d {

	static fun simplify(points, tolerance) {
		sqTolerance = tolerance * tolerance;
		return Simplify2d.simplifyDouglasPeucker(points, sqTolerance);
	}

	static fun simplify(points, tolerance, highestQuality) {
		sqTolerance = tolerance * tolerance;
		if (!highestQuality)
			points = Simplify2d.simplifyRadialDistance(points, sqTolerance);
		points = Simplify2d.simplifyDouglasPeucker(points, sqTolerance);
		return points;
	}

	// distance-based simplification
	static fun simplifyRadialDistance(points, sqTolerance) {
		length = len(points);

		point = [];
		prevPoint = points[0];

		newPoints = [];
		newPoints.append(prevPoint);

		for (i = 1; i < length; i++) {
			point = points[i];

			if (Simplify2d.getSquareDistance(point, prevPoint) > sqTolerance) {
				newPoints.append(point);
				prevPoint = point;
			}
		}

		if (!prevPoint.equals(point)) {
			newPoints.append(point);
		}

		return newPoints;
	}

	// simplification using optimized Douglas-Peucker algorithm with recursion
	// elimination
	static fun simplifyDouglasPeucker(points, sqTolerance) {
		length = len(points);

		markers = [];

        first = 0;
		last = length - 1;

        for(i=0;i<length;i++){
            markers.append(2);
        }
        markers[0] = 1;
        markers[last] = 1;

		maxSqDist = 0;
		sqDist = null;
		index = 0;

		firstStack = [];
		lastStack = [];

		newPoints = [];

		
 
		while (last != null) {
			maxSqDist = 0;

			for (i = first + 1; i < last; i++) {
				sqDist = Simplify2d.getSquareSegmentDistance(points[i], points[first], points[last]);

				if (sqDist > maxSqDist) {
					index = i;
					maxSqDist = sqDist;
				}
			}

			if (maxSqDist > sqTolerance) {
				markers[index] = 1;

				firstStack.append(first);
				lastStack.append(index);

				firstStack.append(index);
				lastStack.append(last);
			}

			if (len(firstStack) > 1)
				first = firstStack.remove(len(firstStack) - 1);
			else
				first = null;

			if (len(lastStack) > 1)
				last = lastStack.remove(len(lastStack) - 1);
			else
				last = null;
		}

		for (i = 0; i < length; i++) {
			if (markers[i] != 2)
				newPoints.append(points[i]);
		}

		return newPoints;
	}

	static fun getSquareDistance(p1, p2) {
		dx = p1.x - p2.x;
        dz = p1.y - p2.y;
		return dx * dx + dz * dz;
	}

	// square distance from a point to a segment
	static fun getSquareSegmentDistance(p, p1, p2) {
		x = p1.x;
        z = p1.y;

		dx = p2.x - x;
        dz = p2.y - z;

		t = 0;

		if (dx != 0 || dz != 0) {
			t = ((p.x - x) * dx + (p.y - z) * dz )/ (dx * dx + dz * dz);

			if (t > 1) {
				x = p2.x;
				z = p2.y;

			} else if (t > 0) {
				x = x + dx * t;
				z = z + dz * t;
			}
		}

		dx = p.x - x;
		dz = p.y - z;

		return dx * dx + dz * dz;
	}
}
*/